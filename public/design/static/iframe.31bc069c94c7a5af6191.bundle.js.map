{"version":3,"file":"static/iframe.31bc069c94c7a5af6191.bundle.js","sources":["webpack:///./app/widgets/QuickCreate/index.jsx"],"sourcesContent":["// @flow\nimport React from 'react';\nimport { Modal } from '../../components/Modal';\nimport { Input } from '../../components/Input';\nimport type { Checkbox } from '../../components/Input/utils';\nimport { Utils } from '../../utils';\nimport css from './QuickCreate.scss';\nimport { DynamicForm } from '../../components/Form/DynamicForm';\n\n// value - e.g. category.id\n// label - e.g. category.name\n// checked - i.e. is category used in Moment?\n\nexport type Props = {\n  checkboxes: Checkbox[],\n  placeholder?: string,\n  name: string,\n  id: string,\n  label: string,\n  formProps: any,\n};\n\nexport type State = {\n  checkboxes: Checkbox[],\n  open: boolean,\n  modalKey?: string,\n  tagKey?: string,\n  body?: any,\n  accordionOpen: boolean,\n};\n\nconst alpha = (a: string, b: string) => {\n  if (a.toLowerCase() > b.toLowerCase()) return 1;\n  if (a.toLowerCase() < b.toLowerCase()) return -1;\n  return 0;\n};\n\nconst sortAlpha = (checkboxes: Checkbox[]): Checkbox[] =>\n  // eslint-disable-next-line implicit-arrow-linebreak\n  checkboxes.sort((a: Checkbox, b: Checkbox) => alpha(a.label, b.label));\n\nexport class QuickCreate extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      checkboxes: sortAlpha(props.checkboxes),\n      open: false,\n      accordionOpen: false,\n    };\n  }\n\n  getCheckboxes = () => {\n    const { checkboxes } = this.state;\n    const checkboxesProp = [];\n    checkboxes.forEach((checkbox: Checkbox) => {\n      const checkboxProp = {\n        id: checkbox.id,\n        label: checkbox.label,\n        value: checkbox.value,\n        checked: checkbox.checked,\n      };\n      checkboxesProp.push(checkboxProp);\n    });\n    return checkboxesProp;\n  };\n\n  labelExists = (label: string) => {\n    const { checkboxes } = this.state;\n    return checkboxes.filter(\n      (checkbox: Checkbox) => checkbox.label.toLowerCase() === label.toLowerCase(),\n    ).length;\n  };\n\n  addToCheckboxes = (data: { name: string, id: string, slug: string }) => {\n    const { checkboxes } = this.state;\n    const { name, id, slug } = data;\n    const newCheckboxes = checkboxes.slice(0);\n    newCheckboxes.push({\n      id: slug,\n      label: name,\n      value: id,\n      checked: true,\n    });\n    return sortAlpha(newCheckboxes);\n  };\n\n  onCreate = (response: any) => {\n    const { data } = response;\n    if (data && data.success) {\n      this.setState({\n        open: false,\n        accordionOpen: true,\n        modalKey: Utils.randomString(),\n        tagKey: Utils.randomString(),\n        checkboxes: this.addToCheckboxes(data),\n      });\n    }\n  };\n\n  displayQuickCreateForm = (nameValue: string) => {\n    const { formProps } = this.props;\n    return (\n      <DynamicForm\n        nameValue={nameValue}\n        formProps={formProps}\n        onCreate={this.onCreate}\n      />\n    );\n  };\n\n  onChange = (data: { label: string, checkboxes: Checkbox[] }) => {\n    const { label, checkboxes } = data;\n    if (!this.labelExists(label)) {\n      this.setState({\n        open: true,\n        modalKey: Utils.randomString(),\n        body: this.displayQuickCreateForm(label),\n        checkboxes: sortAlpha(checkboxes),\n      });\n    }\n  };\n\n  displayInputTag = () => {\n    const {\n      placeholder, name, id, label,\n    } = this.props;\n    const { tagKey, accordionOpen } = this.state;\n    return (\n      <Input\n        id={id}\n        type=\"tag\"\n        name={name}\n        label={label}\n        checkboxes={this.getCheckboxes()}\n        placeholder={placeholder}\n        onChange={this.onChange}\n        key={tagKey}\n        accordionOpen={accordionOpen}\n        accordion\n        dark\n      />\n    );\n  };\n\n  render() {\n    const { label } = this.props;\n    const { open, modalKey, body } = this.state;\n    return (\n      <div>\n        {this.displayInputTag()}\n        <div className={css.modal}>\n          <Modal body={body} title={label} open={open} key={modalKey} />\n        </div>\n      </div>\n    );\n  }\n}\n"],"mappings":"AACA","sourceRoot":""}